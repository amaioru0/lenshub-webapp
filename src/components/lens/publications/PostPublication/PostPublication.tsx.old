import {
    Textarea,
    Flex,
    Stack,
    Avatar,
    Button,
    Box,
    Modal,
    ModalOverlay,
    ModalContent,
    ModalHeader,
    ModalBody,
    ModalCloseButton,
    useDisclosure,
    HStack,
  } from '@chakra-ui/react';
  import React, { useState, useEffect, useRef } from 'react';

  import { useTransaction, useAccount } from 'wagmi'
  import { useLazyQuery, useQuery, useMutation } from '@apollo/client';
  import { ChangeEvent, useReducer } from 'react';
  import useLensHub from '../../../../lib/wagmi/hooks/useLensHub';
  import {useSelector, useDispatch} from 'react-redux'
  import allActions from '../../../../store/actions';
  import { useIpfs } from '@onichandame/react-ipfs-hook'

  import CREATE_POST_TYPED_DATA from '../../../../lib/graphql/publications/post';
  import { Metadata, MetadataMedia, MetadataVersions, MetadataDisplayType, MetadataAttribute } from './MetadataStandard';
  import { v4 as uuidv4 } from 'uuid';
  import { CID } from 'cids';
import { NFTStorage, File, Blob } from 'nft.storage'
  import mime from 'mime'
  import fs from 'fs'
  import path from 'path'
  import axios from 'axios';

  const NFT_STORAGE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweEU1ODVDQTEwMTRlOTIyZDljNTYxRWU0OURmNTE3Q2MwRTBDQ2M2RGMiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTY0Nzc2ODEzODM1NiwibmFtZSI6Im5leHQifQ.CAOENM6f3EOUSq4f2Wmd1OTueBLfUJDmr9x6JLrYKRI'

  const PostPublication = () => {

    const [postContent, setPostContent] = useState("");
    const { post } = useLensHub();
    const dispatch = useDispatch()
    const state = useSelector(state => state)

    const handleInputChange = (e:any) => {
        setPostContent(e.target.value);
    }
    const { ipfs } = useIpfs()
    const [ contentURICID, setContentURICID ] = useState("")
    const [typedData, setTypedData] = useState();
    const [clicked, setClicked] = useState(false);



    const createContentURI = async (metadata: Metadata) => {
        // create the metadata object we'll be storing
        //   const jsonObj = JSON.stringify(metadata);
          const nftstorage = new NFTStorage({ token: NFT_STORAGE_KEY })
        //   await nftstorage.store({
        //     name,
        //     description,
        // })
        const response = await axios.get("https://picsum.photos/seed/picsum/200/300",  { responseType: 'arraybuffer' })
        const buffer = Buffer.from(response.data, "utf-8")

        const imageFile = new File([ buffer ], '300.jpg', { type: 'image/jpg' })


        // version: MetadataVersions.one,
        // metadata_id: uuidv4(),
        // description: "",
        // content: postContent,
        // external_url: "",
        // name: postContent,
        // attributes: [],
        // image: "",

        const nft = {
            image: imageFile,
            description: "The metaverse is here. Where is it all being stored?",
            //   authors: [{ name: "" }],
            //   content: {
            //     "text/markdown": "The last year has witnessed the explosion of NFTs onto the worldâ€™s mainstage. From fine art to collectibles to music and media, NFTs are quickly demonstrating just how quickly grassroots Web3 communities can grow, and perhaps how much closer we are to mass adoption than we may have previously thought. <... remaining content omitted ...>"
            //   },
              ...metadata
            }
            console.log(nft)
            const cid = await nftstorage.store(nft)
            console.log(cid)
        
        //   console.log(jsonObj)

        //   if(ipfs) {
        //    const res = await ipfs.add(jsonObj)
        //    console.log(res)
        //    setContentURICID(res.path)
        //    const pinset = await ipfs.pin.add(res.path)
        //    console.log(pinset)
        //     return res.path;
        //   }
        }

    useEffect(() => {
        console.log(contentURICID)
        createPostDataType();
    }, [contentURICID])

    const [createPostDataType, { loading, error, data }] = useMutation(CREATE_POST_TYPED_DATA, {
        variables: {
            request: {
                profileId: state.lens.id ? state.lens.id : "0x23",
                contentURI: `ipfs://${contentURICID}`,
                collectModule: {
                // feeCollectModule: {
                //   amount: {
                //     currency: currencies.enabledModuleCurrencies.map(
                //       (c: any) => c.address
                //     )[0],
                //     value: '0.000001',
                //   },
                //   recipient: address,
                //   referralFee: 10.5,
                // },
                revertCollectModule: true,
                },
                referenceModule: {
                followerOnlyReferenceModule: false,
                },
              }
            }
        })

        useEffect(() => {
            if(!loading && clicked) {
                setTypedData(data.createPostTypedData.typedData)
            }
        }, [data])

        useEffect(() => {
            console.log(typedData)
            if(clicked) {
                post({
                    //@ts-ignore
                  // profileId: 23,
                  // contentURI: `ipfs://bafkreia3rtwd6rsddu5igu7no3oaxdz5i3rknvnmiz5zr5j7dt5atv5sry`,
                  // collectModule: "0xb96e42b5579e76197B4d2EA710fF50e037881253",
                  // collectModuleData: "0x0000000000000000000000000000000000000000",
                  // referenceModule: "0x8cc1F4C7D3aFf9053eA2d840EAd31f5B68541A38",
                  // referenceModuleData: "0x0000000000000000000000000000000000000000"
                  profileId: typedData.value.profileId,
                  contentURI: typedData?.value?.contentURI,
                  collectModule: typedData?.value?.collectModule,
                  collectModuleData: typedData?.value?.collectModuleData,
                  referenceModule: typedData?.value?.referenceModule,
                  referenceModuleData: typedData?.value.referenceModuleData,
                 })
            }
        }, [typedData])

    return (
      <Flex
        direction='column'
        border={1}
        // borderColor={colors.border}
        borderStyle='solid'
        boxSizing='content-box'
      >
        <HStack margin={2} p={2}>
          {/* <Avatar src={} /> */}
          <Textarea
          style={{background: "white", color: "black"}}
            placeholder="What's happening?"
            resize='none'
            onChange={handleInputChange}
            value={postContent}
          ></Textarea>
        </HStack>

        <Stack margin={2}>

          <Button
            colorScheme='pink'
            variant='solid'
            alignSelf='flex-end'
            onClick={async () => {
                setClicked(true);
                createContentURI({
                    version: MetadataVersions.one,
                    metadata_id: uuidv4(),
                    description: "",
                    content: postContent,
                    external_url: "",
                    name: postContent,
                    attributes: [],
                    // imageMimeType: "",
                    // media: [],
                    // animation_url: "",
                    // appId: ""
                })
            }}
          >
            Post
          </Button>
        </Stack>
      </Flex>
    );
  }

  export default PostPublication;

